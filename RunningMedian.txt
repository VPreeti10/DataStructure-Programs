import java.util.Collections;
import java.util.PriorityQueue;
import java.util.Stack;

class MedianDataStream {
 
  PriorityQueue<Integer> maxheap=new PriorityQueue<Integer>(Collections.reverseOrder());//track of all small nos //It stores max of all small nos s
  //to return largest no when peek() is called in queu(FIFO)..collection is sorted in e=reverse
  PriorityQueue<Integer> minheap=new PriorityQueue<Integer>();//track of all large nos
  public void addNumber(int x){
    if(maxheap.size()==0)
    {
      maxheap.add(x);
    }
    
    else if(maxheap.size()>minheap.size())
    {
      	if(x > maxheap.peek()){
          minheap.add(x);
    }
      else
    {
        maxheap.add(x);
        minheap.add(maxheap.remove());
    }
    }
    else if(maxheap.size()==minheap.size())
    {
      if(x<minheap.peek())//if x > smallest element on minheap..it shold be a part of max heap which contains all items less than median
      {
        maxheap.add(x);
      }
      else//if x>smalles element on minheap then current smalest should be shifted to maxheap and x be added at the end.
      {
        minheap.add(x);
        maxheap.add(minheap.remove());
      }
    }
  }
  public double getmedian(){
    double median=0;
    if(maxheap.isEmpty())
      median=0.0;
    else if(maxheap.size()==minheap.size())
    {
      median=(maxheap.peek()+minheap.peek())/2;      
    }
    else
      median=maxheap.peek();
    return median;
  }
    
    
    
    
    
    
  public static void main(String[] args) {
   
  }
}
